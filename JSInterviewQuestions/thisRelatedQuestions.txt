1.                                                                                  |2.
What will be the output of the following code snippet?                              |
let age=9;                                                                          |
const human={                                                                       |    const call = {
  age:10,                                                                           |      caller: "mom", 
 grow:()=>{                                                                         |       says: function() {
   this.age++;                                                                      |           console.log(`Hey, ${this.caller} just called.`);
 }                                                                                  |           }   
}                                                                                   |      };
human.grow();                                                                       |   
console.log(human.age);                                                             |       call.says();
a.NaN b.11 c.12 d.None of these                                                     |
ans- d.None of these as the above program outputs 10                                |    What will the code above log to the console?
Explanation:when we call human.grow(), the this.age++ executed                      |    a.Hey, undefined just called.
inside an arrow function,which takes this of its surrounding and not                |    b.Hey, mom just called.
of the calling object.Here this in arrow function-window object.                    |    c.Hey, caller just called.
Here we have age (a let variable) in global scope,but that doesnt get attached      |
to global this.Thus there is no age in this object.                                 |  
So this.age++ didnt result in increment of age value.                               |    Ans-b
_____________________________________________________________________________________________________________________________________________________________________
                                                                                    |
3.Predict the output.                                                               |4.Predict the output
const call = {                                                                      |  const call = {
  caller: "mom",                                                                    |             caller: "mom", 
  says: () => {                                                                     |              says: function() {
    console.log(`Hey, ${this.caller} just called.`);                                |               console.log(`Hey, ${this.caller} just called.`);
  }                                                                                 |              }
};                                                                                  |           };
                                                                                    |      let newCall=call.says;
call.says();                                                                        |       newCall();
a.Hey, undefined just called.                                                       |
b.Hey, mom just called.                                                             | a.Hey, undefined just called.
c.Hey, caller just called.                                                          | b.Hey, mom just called.
                                                                                    | ans-a
ans-a                                                                               | Explanation:Here, we assign a new variable to the says function inside the call object.
Explanation:Arrow functions, as part of ES6 syntax, do NOT have their               | And then we invoke the variable, which is a simple function call.Notice where we invoke
own 'this' keyword.Instead, they will use the 'this' keyword of whatever 'this'     | the function. Is it inside the call object?No. We are invoking newCall() function globally
was outside the function when it was created.                                       | which in turn makes the 'this' keyword equal to the global object.
                                                                                    |
In other words, 'this' inside the arrow function is not bound to our call object,   |
but instead is already bound to where the call object is being created originally,  |
which in this case is the global object. And because the global object does not know|
anything about say() function, 'this' is undefined. And because the global object   |
does not have a caller property, this.caller is undefined.                          |
_________________________________________________________________________________________________________________________________________________________________________
5.Predict the output:                                                               | 6.What will be the output:
                                                                                    |
function anotherCaller() {                                                          |  let lastname="henry";
  console.log(`${this.caller} called, too!`);                                       |    let obj={
}                                                                                   |      lastname:"joe",
const call = {                                                                      |      getName:function(){
  caller: "mom",                                                                    |       console.log(this.lastname+"from inside");
  anotherCaller: anotherCaller,                                                     |       }
  says: function() {                                                                |      }
    console.log(`Hey, ${this.caller} just called.`);                                | obj.getName(); //!!joe from inside
  }                                                                                 | console.log("lastname outside with this is "+this.lastname);//** lastname outside with
};                                                                                  |                                                           //this is undefined   
                                                                                    |  console.log(this); //##Window object
let newCall = call.anotherCaller;                                                   |  console.log(lastname);//@@ henry
newCall();                                                                          |
a.mom called, too!                                                                  |!! Explanation:obj is the calling object ,so it calls getName and this is bound to obj so
b.Hey, mom just called.                                                             |   we get joe as output.
c.undefined called, too!                                                            |**Explanantion:lastname property doesnt exist on window object ,so output is
ans-c.                                                                              |  undefined when we acces lastname on window
Explanation:We are invoking newCall() function globally, which means the 'this'     | ##Explanantion:this is window object in non strict mode AND let variables are not attached                                                                                     |  to window
keyword is referring to the global object. It doesn't matter that we are assigning  | @@Explanation: lastname value is henry
newCall to a function inside the call object. We are calling newCall globally, and  |
globally is where 'this' is assigned.                                               |
__________________________________________________________________________________________________________________________________________________________________________
                                                                                    |8.Predict the output
7.What will be the output for the following code snippet?                           |important
                                                                                    |   let lastname="henry";
let lastname="henry";                                                               |   let obj={
let obj={                                                                           |    lastname:"joe",
  lastname:"joe",                                                                   |    nestedObj:{
    getName:()=>{                                                                   |      lastname:"lilly",
      console.log(this.lastname+" from inside")                                     |       getName:()=>{
  }                                                                                 |          console.log(this.lastname+" from inside")
                                                                                    |          }
}                                                                                   |       }
obj.getName();   //**                                                               |    }
console.log("lastname from outside is  "+this.lastname); //@@                       |  obj.nestedObj.getName(); //**
console.log(this);  //!!                                                            |
                                                                                    |  Output:undefined from inside
 Output:                                                                            |Explanation:the getName() function is an arrow function,so this would refer to window 
 **- undefined from inside                                                          |   object and window doesn't have lastname
 Explanation:as getName is an arrow function,so this would refer to window object   |
 and window doesn't have lastname                                                   |
 @@-lastname from outside is undefined                                              |
 Explanation:this here is Window object,so lastName is undefined                    |
 !!-Window                                                                          |
 ________________________________________________________________________________________________________________________________________________________________________
 9.What will be the output:                                                         |10.What will be the output:
 let lastname="henry";                                                              | let lastname="henry";
let obj={                                                                           |  let obj={
  lastname:"joe",                                                                   |     lastname:"joe",
  nestedObj:{                                                                       |     nestedObj:{
    lastname:"lilly",                                                               |       getName:function(){
    getName:function(){                                                             |        console.log(this.lastname+" from inside");
      console.log(this.lastname)                                                    |        }
  }                                                                                 |     }
  }                                                                                 |  }
}                                                                                   |obj.nestedObj.getName();//**
obj.nestedObj.getName(); //**                                                       |
Output:lilly                                                                        |Output:undefined
                                                                                    |Explanation:As the getName is being called by nestedObj of obj,the this in 
                                                                                    | getName refers to nestedObj .so the output is undefined as there is no lastname property
                                                                                    | inside the nestedObj
                                                                                    
__________________________________________________________________________________________________________________________________________________________________________
11.Predict the output of the **ed line                                              
<body>                                                                                    
<button id="button">click me</button>                                                         
<script>                                                                            
clickFunction=function(){                                                              
  console.log(this);//**                                                              
  console.log("clicked");                                                           
}                                                                                    
const b=document.querySelector("button")                                            
b.addEventListener('click',clickFunction);                                          
</script>                                                                           
</body>                                                                             
ans-<button></button>                                                               

/*________________________________________________________________________*/

12. Predict the output
 clickFunction=()=>{
  console.log(this);
  }
  const b=document.querySelector("button")
 b.addEventListener('click',clickFunction);
ans-Window object

/*******************************************************************************/
13.Predict the output:                                                           
var b=7;                                                                         
                                                                                 
var obj={                                                                        
  b:8,                                                                          
  func:function(){                                                              
    console.log(this.b);                                                         
   function abc(){                                                               
     var b=9;                                                                    
     console.log(this.b);                                                        
    }                                                                            
    abc();                                                                      
  }                                                                             
                                                                                
}                                                                                
obj.func();                                                                      
output:
8
7
/**************************************************************************************************************/
14.
let b=7;
let obj={
 b:8,
 func:function(){
  console.log(this.b);
   function abc(){
      let b=9;
      console.log(this.b);
    }  
       abc();
   }
   }
   obj.func();
  Output: 8 undefined
  
  /********************************************************************************************************/
15.function sayName() {
	setTimeout(() => {
		console.log(this.name);
	}, 1000);
}
sayName.call({ name: 'Yomesh' });
/*Output:Yomesh
EXPLANATION: we are passing an arrow function to the setTimeout. Arrow functions retains the scope of their definition. 
Hence, when the arrow function will be called then context will be same as sayName function.*/
/*Question*/
let x = 1;

do {
	let y = --x;
	console.log(x++ + --y);
} while (x++ < 5);
/*Output
-1
1
3
5
7

--- x = 1 ---
y = --x; // y = 0 and x = 0
console.log(x++ + --y) // (0 + (-1)) = -1, and x = 1 now
while(x++ &lt; 5) // (1 &lt; 5) is true, and x = 2 now
Next Iteration:

--- x = 2 ---
y = --x; // y = 1 and x = 1
console.log(x++ + --y) // (1 + 0) = 1, and x = 2 now
while(x++ &lt; 5) // (2 &lt; 5) is true, and x = 3 now
Next Iteration:

--- x = 3 ---
y = --x; // y = 2 and x = 2
console.log(x++ + --y) // (2 + 1) = 3, and x = 3 now
while(x++ &lt; 5) // (3 &lt; 5) is true, and x = 4 now
Next Iteration:

--- x = 4 ---
y = --x; // y = 3 and x = 3
console.log(x++ + --y) // (3 + 2) = 5, and x = 4 now
while(x++ &lt; 5) // (4 &lt; 5) is true, and x = 5 now
Next Iteration:

--- x = 5 ---
y = --x; // y = 4 and x = 4
console.log(x++ + --y) // (4 + 3) = 7, and x = 5 now
while(x++ &lt; 5) // (5 &lt; 5) is false, and loop breaks
Answer: -1 1 3 5 7*/

Some Explanation:
There's no simple explanation for this; it is one of the most confusing concepts in JavaScript. The value of this depends on how the function is called.
Some general rule of thumb are following:

If the new keyword is used when calling the function, this inside the function is a brand new object.
If apply, call, or bind are used to call/create a function, this inside the function is the object that is passed in as the argument.
If a function is called as a method, such as obj.method()  —  this is the object that the function is a property of.
If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, this is the global object. In a browser, 
it is the window object. If in strict mode ('use strict'), this will be undefined instead of the global object.
If multiple of the above rules apply, the rule that is higher wins and will set the this value.
If the function is an ES2015 arrow function, it ignores all the rules above and receives the this value of its surrounding scope at the time it is created.
/***************************/
q 16
function foo(){
"use strict";
console.log(this.a);
}
var a=2;
foo();//TypeError: Cannot read properties of undefined (reading 'a')

Explanation: If strict mode is in effect ,the global object is not eligible fot the default binding.So the 'this' is set to undefined
/*********************************************/
